name: chat_handler_deploy
on: [push]
jobs:
  chat_handler_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set Environment Variables
        run: |
          echo "ECR_REGISTRY=${{ steps.ecr-login.outputs.registry }}" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=compost-chatbot/chat-handler" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Build and push Docker image
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f chat_handler/Dockerfile .

          echo "Pushing Docker image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Print Image URI
        run: |
          echo "Image URI to be used: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Update Lambda function to use new image
        run: |
          echo "Updating Lambda function..."
          aws lambda update-function-code --function-name compost-chatbot-chat-handler --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Verify Lambda update
        run: |
          echo "Verifying Lambda function update..."
          STATUS="InProgress"
          while [ "$STATUS" != "Successful" ]; do
            LAMBDA_CONFIG=$(aws lambda get-function-configuration --function-name compost-chatbot-chat-handler)
            STATUS=$(echo $LAMBDA_CONFIG | jq -r '.LastUpdateStatus')
            echo "Current STATUS: $STATUS"
            if [ "$STATUS" != "Successful" ]; then
              echo "Update is still in progress. Waiting for 10 seconds..."
              sleep 10
            fi
          done
          echo "Final STATUS: $STATUS"
          echo "Full Lambda Configuration: $LAMBDA_CONFIG"
          IMAGE_URI=$(echo $LAMBDA_CONFIG | jq -r '.ImageUri')
          echo "Expected Image URI: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "Actual Image URI: $IMAGE_URI"
          if [ "$IMAGE_URI" == "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" ]; then
            echo "Lambda function successfully updated with the new image."
          else
            echo "Lambda function update failed."
            exit 1
          fi
